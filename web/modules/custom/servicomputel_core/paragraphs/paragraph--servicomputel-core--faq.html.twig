{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'py-20',
    'md:py-10',
    'w-full'
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="w-full mx-auto bg-gray-900 text-white shadow-md rounded-lg p-6">
        <div class="space-y-4">
          {% for item in paragraph.field_questions %}
            <!-- Pregunta y respuesta -->
            <div class="border-b border-white">
              <button 
                id="accordion-header-{{ loop.index0 }}" 
                class="accordion-header mb-2 w-full text-left focus:outline-none text-lg font-medium flex items-center justify-between"
                aria-expanded="false"
                aria-controls="accordion-content-{{ loop.index0 }}"
              >
                <span>{{ item.entity.get('field_question').value }}</span>
                <!-- Flecha -->
                <i class="fas fa-chevron-down"></i>
              </button>
              <div id="accordion-content-{{ loop.index0 }}" class="accordion-content hidden mb-2">
                {{ item.entity.get('field_answer').value }}
              </div>
            </div>
          {% endfor %}
        </div>
      </div>
    {% endblock %}
  </div>

  <script>
        document.addEventListener("DOMContentLoaded", function () {
            const accordions = document.querySelectorAll(".accordion-header");

            accordions.forEach((header) => {
                header.addEventListener("click", function () {
                    // Cerrar otros abiertos
                    document.querySelectorAll(".accordion-content").forEach((content) => {
                        if (content !== this.nextElementSibling) {
                            content.classList.add("hidden");
                            content.previousElementSibling.querySelector("i").classList.replace("fa-chevron-up", "fa-chevron-down");
                        }
                    });

                    // Alternar el actual
                    const content = this.nextElementSibling;
                    content.classList.toggle("hidden");
                    this.querySelector("i").classList.toggle("fa-chevron-up");
                    this.querySelector("i").classList.toggle("fa-chevron-down");
                });
            });
        });
    </script>
{% endblock paragraph %}


