{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
	<div class="py-20 px-2 md:px-7 bg-gray-900 text-white relative overflow-hidden flex justify-center items-center">
		<div class="absolute top-0 left-0 w-full h-full z-0">
			<div class="absolute bg-gray-700 rounded-full opacity-30 w-72 h-72 top-96 md:top-72 -left-10 animate-grow-shrink"></div>
			<div class="absolute bg-gray-700 rounded-full opacity-30 w-60 h-60 top-0 -right-28 animate-grow-shrink"></div>
		</div>
		<div{{attributes.addClass(classes)}}>
			{% block content %}
				{% if content.field_carousel_gallery["#items"]  %}
					<div class="container grid grid-cols-1 md:grid-cols-2 justify-items-center items-center md:justify-items-end gap-7 relative z-10">
						<div class="flex flex-col gap-5">
							{{content.field_details}}
						</div>
						<div class="swiper swiper-baner rounded-lg">
							<div class="swiper-wrapper ">
								{% for item in content.field_carousel_gallery["#items"] %}
									<div class="swiper-slide swiper-slide-baner">
										<img src="{{file_url(item.entity.field_media_image.entity.uri.value)}}" alt="Slider 1" class=" rounded-lg">
									</div>
								{% endfor %}
							</div>
							<div class="swiper-pagination swiper-baner-pagination"></div>
						</div>
					</div>
					{% else %}
						<h1 class="py-10 w-full text-center justify-center items-center">
							{{content.field_details}}
						</h1>
				{% endif %}
			{% endblock %}
		</div>
	</div>
{% endblock paragraph %}
